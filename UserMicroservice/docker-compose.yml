version: '3.4'

services:
  usermicroservice:
    image: ${DOCKER_REGISTRY-}usermicroservice
    ports:
        - 52800:80
    build:
      context: .
      dockerfile: UserMicroservice\Dockerfile
    depends_on:
        - mssql
        - broker
        - zookeeper
    links:
        - mssql

  eventmicroservice:
    image: ${DOCKER_REGISTRY-}eventmicroservice
    ports:
        - 52801:80
    build:
      context: .
      dockerfile: EventMicroservice/Dockerfile
    depends_on:
        - broker
        - zookeeper

  mssql:
    image: "mcr.microsoft.com/mssql/server"
    environment:
        SA_PASSWORD: "Password123"
        ACCEPT_EULA: "Y"
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-Usa", "-PPassword123", "-Q", "select 1"]
      interval: 1s
      retries: 20

  redis-api:
    image: redis:latest

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'

  broker:
    image: wurstmeister/kafka
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_HOST_NAME: broker
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

  # This "container" is a workaround to pre-create topics
  kafka-setup:
    image: confluentinc/cp-kafka:5.1.1
    container_name: kafka-setup
    depends_on:
      - broker
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b broker:9092 1 20 && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic event-created'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored