version: '3.4'

services:
  usermicroservice:
    image: ${DOCKER_REGISTRY-}usermicroservice
    ports:
        - 52800:80
    build:
      context: .
      dockerfile: UserMicroservice\Dockerfile
    depends_on:
        - broker
        - mssql
    links:
        - mssql
        - broker

  eventmicroservice:
    image: ${DOCKER_REGISTRY-}eventmicroservice
    ports:
        - 52801:80
    build:
      context: .
      dockerfile: EventMicroservice/Dockerfile
    depends_on:
        - broker
        - zookeeper
        - mongodb       

  mssql:
    image: "mcr.microsoft.com/mssql/server"
    environment:
        SA_PASSWORD: "Password123"
        ACCEPT_EULA: "Y"
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-Usa", "-PPassword123", "-Q", "select 1"]
      interval: 1s
      retries: 20

  redis-api:
    image: redis:latest
    ports:
       - 6379:6379 

  redis-cache:
    image: redis:latest
    ports:
       - 6380:6379

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'

  broker:
    image: wurstmeister/kafka
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_HOST_NAME: broker
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_MESSAGE_MAX_BYTES: 15728640
      KAFKA_REPLICA_FETCH_MAX_BYTES: 15728640
      KAFKA_FETCH_MESSAGE_MAX_BYTES: 15728640
      KAFKA_MAX_REQUEST_SIZE: 15728640



  schema_registry:
    image: confluentinc/cp-schema-registry:5.5.0
    hostname: schema_registry
    container_name: schema_registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:9092'
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'

  # This "container" is a workaround to pre-create topics
  kafka-setup:
    image: confluentinc/cp-kafka:5.1.1
    container_name: kafka-setup
    depends_on:
      - broker
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b broker:9092 1 20 && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic event-created && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic event-started'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  mongodb:
    image : mongo
    container_name: mongodb
    environment:
        - MONGO_INITDB_DATABASE=events
        - MONGO_INITDB_ROOT_USERNAME=root
        - MONGO_INITDB_ROOT_PASSWORD=pass12345
    volumes:
        - /home/barry/mongodb/database:/data/db
    ports:
        - 27017:27017
    healthcheck:
        test: echo 'db.runCommand("ping").ok' | mongo 10.10.10.60:27017/test --quiet
        interval: 30s
        timeout: 10s
        retries: 3
    restart: unless-stopped


  streamingmicroservice:
    image: ${DOCKER_REGISTRY-}streamingmicroservice
    ports:
      - "52802:80"
    depends_on:
        - broker
        - zookeeper
    build:
      context: .
      dockerfile: StreamingMicroservice/Dockerfile

